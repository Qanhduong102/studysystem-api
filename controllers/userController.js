const User = require("../models/User");
const Course = require("../models/Course");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");

// üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
exports.getAllUsers = async (req, res) => {
    try {
        const users = await User.find().select("-password");
        res.json(users);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};

// üü¢ L·∫•y th√¥ng tin user theo ID
exports.getUserById = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).select("-password");
        if (!user) {
            return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
        }
        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};

// üü¢ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
exports.register = async (req, res) => {
    try {
        const { name, email, password, role, dateOfBirth, phoneNumber, address, gender } = req.body;

        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = new User({
            name,
            email,
            password: hashedPassword,
            role,
            dateOfBirth,
            phoneNumber,
            address,
            gender
        });

        await newUser.save();
        res.status(201).json({ message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng", user: newUser });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};

// üü¢ ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
exports.login = async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
        }

        const token = jwt.sign(
            { id: user._id, role: user.role },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );

        res.status(200).json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                role: user.role,
                createdAt: user.createdAt,
            },
        });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};

// üü¢ X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (req, res) => {
    try {
        await User.findByIdAndDelete(req.params.id);
        res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};

// üü¢ Qu√™n m·∫≠t kh·∫©u
exports.forgotPassword = async (req, res) => {
    try {
        const { email } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
        }

        // T·∫°o m√£ 6 s·ªë ng·∫´u nhi√™n
        const resetCode = Math.floor(100000 + Math.random() * 900000).toString();

        // L∆∞u m√£ v√†o database
        user.resetPasswordToken = resetCode;
        user.resetPasswordExpires = Date.now() + 15 * 60 * 1000; // H·∫øt h·∫°n sau 15 ph√∫t
        await user.save();

        // G·ª≠i email v·ªõi m√£ 6 s·ªë
        const transporter = nodemailer.createTransport({
            service: "Gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS,
            },
        });

        const mailOptions = {
            to: user.email,
            from: process.env.EMAIL_USER,
            subject: "Kh√¥i ph·ª•c m·∫≠t kh·∫©u - StudySystem",
            text: `B·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y v√¨ b·∫°n (ho·∫∑c ai ƒë√≥) ƒë√£ y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.\n\n` +
                  `M√£ kh√¥i ph·ª•c m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${resetCode}\n\n` +
                  `M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, vui l√≤ng b·ªè qua email n√†y.\n`,
        };

        await transporter.sendMail(mailOptions);
        res.status(200).json({ message: "M√£ kh√¥i ph·ª•c m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email", email });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};

// üü¢ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.resetPassword = async (req, res) => {
    try {
        const { email, resetCode, newPassword } = req.body;

        const user = await User.findOne({
            email,
            resetPasswordToken: resetCode,
            resetPasswordExpires: { $gt: Date.now() },
        });

        if (!user) {
            return res.status(400).json({ message: "M√£ kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
        }

        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(newPassword, salt);
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        await user.save();

        res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};

// C√°c h√†m li√™n quan ƒë·∫øn Course (gi·ªØ nguy√™n)
exports.getCourses = async (req, res) => {
    try {
        const courses = await Course.find().populate("instructor", "name email");
        res.json(courses);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};

exports.getCourseById = async (req, res) => {
    try {
        const course = await Course.findById(req.params.id).populate("instructor", "name email");
        if (!course) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc" });
        res.json(course);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};

exports.createCourse = async (req, res) => {
    const { title, description, price, category, thumbnail, instructor } = req.body;

    if (!title || !description || !price || !category || !instructor) {
        return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    try {
        const newCourse = new Course({
            title,
            description,
            instructor,
            price,
            category,
            thumbnail,
        });

        await newCourse.save();
        res.status(201).json(newCourse);
    } catch (error) {
        res.status(400).json({ message: "L·ªói khi t·∫°o kh√≥a h·ªçc" });
    }
};

exports.updateCourse = async (req, res) => {
    try {
        const course = await Course.findById(req.params.id);
        if (!course) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc" });

        const updatedCourse = await Course.findByIdAndUpdate(req.params.id, req.body, { new: true });
        res.json(updatedCourse);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};

exports.deleteCourse = async (req, res) => {
    try {
        const deletedCourse = await Course.findByIdAndDelete(req.params.id);
        if (!deletedCourse) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc" });

        res.json({ message: "X√≥a kh√≥a h·ªçc th√†nh c√¥ng" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};